@startuml "Zadanie 1 Przypadki użycia"
left to right direction

actor Klient as client
actor Pizzerman as pizzerman
actor "Operator płatności" as payments_operator
actor "Operator dostaw" as delivery_operator

rectangle "Zamawianie pizzy (aplikacja www dla pojedyńczej pizzerii)" {
    (Aktualizacja listy dań [UC1]) as UC1
    (Przeglądanie listy dań [UC2]) as UC2
    (Złożenie zamówienia [UC3]) as UC3
    (Przygotowanie do odbioru [UC4]) as UC4

    client --> UC3
    client --> UC2
    pizzerman --> UC1
    pizzerman --> UC3
    pizzerman --> UC4
    delivery_operator --> UC4
    payments_operator --> UC3
    payments_operator --> UC4
}
@enduml

@startuml "Zadanie 2 Diagram klas"
    class ListaDań
    note left: Lista wszystkich rodzajów pizzy dostępnych dla klientów do stworzenia zamówienia

    class DoRealizacji {
    }
    note left: Lista opłaconych zamówień, do realizacji

    class Pizza {
        String nazwa
        String rozmiar
    }
    note left of Pizza::nazwa
        Na przykład 'Hawajska'
    end note
    note left of Pizza::rozmiar
        Na przykład 'Mała, Średnia, Duża, Familijna'
    end note

    class AdresDostawy {
        String ulica
        String numerDomu
        String numerMieszkania
    }

    class Zamówienie {
        Pizza pizza
        Integer ilość
        Płatność płatność
        StatusZamówienia status
        AdresDostawy adresDostawy
    }

    enum StatusZamówienia {
        STWORZONE
        ...
        ODEBRANE
    }

    class Płatność {

    }

    ListaDań o-- Pizza : zawiera
    Płatność --> Zamówienie : opłaca
    Zamówienie "1" o-- "many" Pizza
    Zamówienie *-- AdresDostawy
    DoRealizacji o-- Zamówienie

@enduml


@startuml "Zadanie 3 diagram interakcji UC3"
(*) --> UC3
--> Klient wprowadza adres dostawy
--> Klient dodaje / usuwa pozycje listy dań do Zamówienia
--> Klient zatwierdza zamówienie
--> Opłacenie zamówienia na stronie 'Realizatora Płatności'
--> Dodanie opłaconego zamówienia do listy 'Do realizacji'
--> Poinformowanie Klienta o przyjęciu zlecenia
--> (*)
@enduml


@startuml "Zadanie 3 diagram interakcji UC4"
(*) --> UC4
--> if "Zmiana statusu realizacji na" then
    -right-> [Anulowane przez nas] Status zamówienia jest Anulowane
    --> Dodanie opisu Zamówienia 'anulowana przez nas'
    --> if "Zwrot środków za zamówienie na konto zleceiodawcy" then
      --> [udany] Pozycja na liście 'Do realizacji' jest w stanie 'środki zwrócone'
    else
      -right-> [odrzucony] Dodanie opisu Zamówienia 'do rozliczenia, awaria systemu płatności'
    endif
else
    -----> if "Zmiana statusu realizacji na" then
        -right-> [Anulowana przez klienta] "Status zamówienia jest Anulowane" as Cancelled2
        --> Dodanie opisu Zamówienia 'Anulowana przez klienta'
    else
    endif
    ---> Pozycja na liście 'Do realizacji' jest 'Gotowe do odbioru'
    --> if "Przyjęte do transportu?" then
        --> [tak] "Dostarczone do klienta"
        else
            -right-> [nie] "Oznaczenie zamówienia jako Anulowane" as Cancelled3
            if "Zwrot środków za Zamówienie" then
            else
                -right-> [odrzucony] "Dodanie opisu 'Anulowana z przyczyn technicznych - brak możliwości dostawy, do rozliczenia'"
            endif
        endif
endif
@enduml


@startuml "Zadanie 4 Stany Zamówienia"
state Zamówienie {
    state "Stworzone" as Created
    state "Opłacone" as Payed
    state "Gotowe do odbioru" as Finished
    state "Wydane" as Issued
    state "W drodze" as Delivered
    state "Anulowane" as Cancelled
    state "Środki zwrócone" as Refunded
    [*] --> Created
    Created --> Payed
    Payed --> Finished
    Payed -> Cancelled
    Finished --> Issued
    Finished -> Cancelled
    Issued -> Delivered
    Cancelled ---> Refunded
    Refunded --> [*]
    Cancelled --> [*]
    Delivered --> [*]
}
@enduml

@startuml "Zadanie 5 Diagram aktywności"
actor "Pizzerman" as Pizzerman
note over Pizzerman : Diagram stanów zawiera wyłącznie możliwe przejścia \npomiędzy stanami, podczas gdy diagram aktywności pokazuje\njak wygląda interakcja między aktorami / systemami tak, aby zmiany stanów odbywały się.
actor "Klient" as Client
control "Operator Płatności" as PaymentOperator
control "Operator Dostaw" as DeliveryOperator
entity "Zamówienie" as Order
Client -> Order : Stworzone
Client -> PaymentOperator : Prezkazanie środków
PaymentOperator -> Order :  Opłacone
Pizzerman -> Order : Gotowe do odbioru
DeliveryOperator -> Order : W drodze 
DeliveryOperator -> Order : Wydane 
@enduml


Use Case 3

Scenariusz testowy: Złożenie zmaówienia
Warunki początkowe:
- Pizzerman jest zalogowany do aplikacji
- Operator płatności jest online
Kroki:
- Klient uruchamia aplikację
- Klient tworzy zamówienie
- Klient opłaca zamówienie
Oczekiwany rezultat:
- Pizzerman widzi nowe zamówienie na końcu listy 'Do realizacji'
- Klient ma potwierdzenie o przyjęciu zamówienia


Use case 4
Scenariusz testowy: Odbiór zamówienia
Warunki początkowe:
- Pizzerman jest zalogowany do aplikacji
- Operator dostaw jest online
- Lista 'Do realizacji' jest niepusta
Kroki:
- Pizzerman oznacza Pozycję 'Gotowa do odbioru'
- Operator dostaw przyjmuje zlecenie dostarczenie Pozycji
- Pizzerman oznacza Pozycję jako 'wydana'
- Operator dostaw oznacza Pozycję jako 'W drodze'
- Pozycja zostaje dostarczona do Klienta
- Pozycja znika z list 'Do Realizacji'
- Pozycja pojawia się na liście 'Zrealizowane'
Oczekiwany rezultat:
- Pozycja zostaje dostarczona do Klienta
- Pozycja pojawia się na liście 'Zrealizowane'

Use case 5 (nie istniejący)
Scenariusz testowy: Pozytywne rozpatrzenie reklamacji
Warunki początkowe:
- Pozycja jest się na liście 'Zrealizowane'
- Klient reklamuję dostarczoną Pizzę dowolną metodą (telefon, email)
- Operator Płatności jest online
Kroki:
- Szef Zmiany oznacza reklamowaną Pozycję jako 'Reklamacja'
- Operator Płatności przelewa z konta Firmy na konto Klienta kwotę za Pozycję, pomniejszoną o kwoty pośrednika (Operatora Płatności)
Oczekiwany rezultat:
- Pozycja zostaje oznaczona jako 'Reklamacja'
- Klient dostaje zwrot środkó na swoje konto
